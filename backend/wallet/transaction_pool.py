

class TransactionPool():
    def __init__(self):
        self.transaction_map = {} #I'm using map for the key value pair characteristc

    def set_transaction(self, transaction):
        """
        Set a transaction in the transaction pool.
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address):
        """
        Find a transaction generated by the address in the transaction pool.
        """
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:
                return transaction
            #if no transaction satifies the condition by default python returns none
    
    def transaction_data(self):
        """
        Return the transactions of the transaction pool represented in their
        json serialized form.
        """
        #each value will be a instance of transaction

        return list(map
                (lambda transaction: transaction.to_json(), 
                self.transaction_map.values())
        )

    def clear_blockchain_transaction(self, blockchain):
        """
        Delete blockchain recorded transaction from the transaction pool.
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try: #if it doesn't find nothing to delete it will raise a kwy error
                    del self.transaction_map[transaction['id']]
                except KeyError:
                    pass
